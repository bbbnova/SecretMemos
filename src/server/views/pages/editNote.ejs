
<form id="form" class="container"> 
    <input name="title" id="title" type="text" value="<%=locals.note.title%>"/>
    <br/>
    <input name="description" id="description" placeholder="description" type="text" value="<%-locals.note.description%>"/>
    <br/>
    <input name="number" id="number" type="number" value="<%-locals.note.number%>"/>

    <div class="pages">
        <% let i = 0 %>
        <% for(i = 0; i < locals.note.pages.length; i++) {%>
            <button class="page" type="button" data-page="<%=locals.note.pages[i]._id%>" onclick="pageClick(this)"><%-locals.note.pages[i].title%></button>
        <% } %>
        <button type="button" id="btnAddNewPage" onclick="addNewPage('<%- i %>')">add page</button>
    </div>
    <br/>
    <br/>
    <br/>
    <div class="pageContent">

        <!-- <textarea id="pageText" cols="50" rows="50">

        </textarea> -->

        <div class="main-container">
            <div class="editor-container editor-container_inline-editor" id="editor-container">
                <div class="editor-container__editor">
                    <div id="editor"></div>
                </div>
            </div>
        </div>
        
    </div>

    <button id="btnSave" type="button" onclick="saveData()">Save</button>
    <button id="btnDelete" type="button" onclick="deletePage()">Delete</button>
</form>

<script type="importmap">
    {
        "imports": {
            "ckeditor5": "/ckeditor/ckeditor5/ckeditor5.js",
            "ckeditor5/": "/ckeditor/ckeditor5/"
        }
    }
</script>

<script type="module" src="/ckeditor/main.js"></script>

<script>
    let currentPage;

    async function getUserSalt() {
        try {
            let response = await fetch("/api/user/getSalt", {
                method: "GET" 
            })
            
            if(response.status === 200) {
                let {salt} = await response.json();
                return salt;
            } else {
                console.log('error geting user salt')
            }
        } catch(err) {
            console.error(err)
        }
    }

    async function pageClick(button) {
        const domEditableElement = document.querySelector( '.ck-editor__editable_inline' ); 
        const editor = domEditableElement.ckeditorInstance; 
        

        let salt = await getUserSalt()
        let encryptedPwd = sessionStorage.getItem('pwd')
        let pwd = await decrypt(encryptedPwd, salt); 

        let pageId = button.dataset.page
        let response = await fetch("/api/pages/get", {
            method: "POST",
            body: JSON.stringify({
                page_id: pageId
            }),
            headers: {
                "Content-type": "application/json; charset=UTF-8"
            }
        })

        if(response.status === 200) {
            currentPage = await response.json()
            editor.setData(await decrypt(currentPage.content, pwd));
            document.querySelector(".pageContent").classList.remove("hidden")
        } 
        else {
            console.log('can not fing page')
        }
    }

    async function addNewPage(number) { 
        let salt = await getUserSalt()
        let encryptedPwd = sessionStorage.getItem('pwd')
        let pwd = await decrypt(encryptedPwd, salt); 

        let response = await fetch("/api/pages/add", {
                method: "POST",
                body: JSON.stringify({
                    _id: note._id,
                    title: 'title',
                    number: number,
                    description: 'description',
                    note_id: note._id,
                    page_content: await encrypt('data here', pwd)
                }),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
        if(response.status === 200) {
            let newPage = currentPage = await response.json()
            //add html
            let divPages = document.querySelector('div.pages') 

            let btn = document.createElement('button')
            btn.setAttribute('data-page', newPage._id)  
            btn.classList.add('page')  
            btn.setAttribute('onClick', 'javascript: pageClick(this)') 
            btn.setAttribute('type', 'button') 
            // btn.onclick = await pageClick(btn)
            btn.innerHTML = newPage.title
            divPages.insertBefore(btn, document.getElementById('btnAddNewPage'))
            pageClick(btn)
            return newPage;
        }
    }

    async function saveData() {
        let form = document.getElementById('form')

        let salt = await getUserSalt()
        let encryptedPwd = sessionStorage.getItem('pwd')
        let pwd = await decrypt(encryptedPwd, salt);  
        
        const domEditableElement = document.querySelector( '.ck-editor__editable_inline' ); 
        const editor = domEditableElement.ckeditorInstance;

        let data = editor.getData();
        data = await encrypt(data, pwd)
        
        //update page
        //update note
        let response = await fetch("/api/notes/update", {
            method: "POST",
            body: JSON.stringify({
                _id: note._id,
                title: form.title.value,
                number: form.number.value,
                description: form.description.value,
                page_id: currentPage._id,
                page_content: data
            }),
            headers: {
                "Content-type": "application/json; charset=UTF-8"
            }
        })
        
        if(response.status === 200) {
            // window.location.href = '/notes'
            //window.location.reload()
            //saved message to user
        }
    }

    async function deletePage() {
        let response = await fetch("/api/pages/delete", {
                method: "POST",
                body: JSON.stringify({
                    page_id: currentPage._id
                }),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
        if(response.status === 200) {
            // window.location.reload()
            let btnPage = document.querySelector('.page[data-page="'+ currentPage._id +'"]').remove() 
            await loadFirstPage()
        }
    }

    const loadFirstPage = async () => {
        let salt = await getUserSalt()
        let encryptedPwd = sessionStorage.getItem('pwd')
        let pwd = await decrypt(encryptedPwd, salt); 
        let pages = document.querySelectorAll(".page")

        if(pages.length > 0) {
            await pageClick(pages[0])
            document.querySelector(".pageContent").classList.remove('hidden')
        } else {
            document.querySelector(".pageContent").classList.add('hidden')
        }
    }

    let note = JSON.parse('<%- JSON.stringify(locals.note) %>')
    loadFirstPage()
</script>